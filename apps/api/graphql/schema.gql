# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Float!
  email: String!
  firstName: String!
  lastName: String!
  role: Role!
  status: UserStatus!
}

enum Role {
  admin
  user
}

enum UserStatus {
  active
  inactive
}

type TokensResponseModel {
  accessToken: String!
  refreshToken: String!
}

type SignInResponseModel {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Document {
  id: Float!
  title: String!
  content: String!
  author: User!
  parentId: Float
  collectionId: Float!
  children: [Document!]!
}

type Collection {
  id: Float!
  name: String!
  description: String
  documents: [Document!]!
  members: [CollectionMember!]!
}

type CollectionMember {
  user: User!
  role: UserCollectionRole!
  joinedAt: DateTime!
}

"""The role of a user in a collection"""
enum UserCollectionRole {
  owner
  editor
  viewer
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CollectionInvite {
  id: String!
  collectionId: Float!
  collection: Collection!
  inviterEmail: String!
  inviteeEmail: String!
  role: UserCollectionRole!
  token: String!
  expiresAt: DateTime!
  createdAt: DateTime!
}

type CollectionShareLink {
  id: String!
  url: String!
  token: String!
  role: UserCollectionRole!
  expiresAt: DateTime
  createdAt: DateTime!
}

type QueryResponse {
  token: String!
  completed: Boolean!
}

type Query {
  user: User!
  document(getDocumentInput: GetDocumentInput!): Document!
  collections: [Collection!]!
  collection(collectionId: Int!): Collection!
  collectionMembers(collectionId: Int!): [CollectionMember!]!
  collectionPendingInvites(collectionId: Int!): [CollectionInvite!]!
  collectionShareLinks(collectionId: Int!): [CollectionShareLink!]!
}

input GetDocumentInput {
  documentId: Float!
}

type Mutation {
  signUp(signUpInput: SignUpInput!): Void
  confirmEmail(hash: String!): SignInResponseModel!
  signIn(signInInput: SignInInput!): SignInResponseModel!
  refreshTokens: TokensResponseModel!
  resetPasswordRequest: Void
  resetPassword(resetPasswordInput: ResetPasswordInput!): SignInResponseModel!
  signOut: Void
  createDocument(createDocumentInput: CreateDocumentInput!): Document!
  updateDocument(updateDocumentInput: UpdateDocumentInput!): Document!
  deleteDocument(deleteDocumentInput: DeleteDocumentInput!): Document!
  createCollection(createCollectionInput: CreateCollectionInput!): Collection!
  updateCollection(updateCollectionInput: UpdateCollectionInput!): Collection!
  deleteCollection(deleteCollectionInput: DeleteCollectionInput!): Collection!
  inviteUserToCollection(inviteUserToCollectionInput: InviteUserToCollectionInput!): CollectionInvite!
  acceptCollectionInvite(acceptCollectionInviteInput: AcceptCollectionInviteInput!): Collection!
  generateCollectionShareLink(generateCollectionShareLinkInput: GenerateCollectionShareLinkInput!): CollectionShareLink!
  joinCollectionByShareLink(token: String!): Collection!
  removeUserFromCollection(removeUserFromCollectionInput: RemoveUserFromCollectionInput!): CollectionMember!
  deleteCollectionShareLink(shareLinkId: String!): CollectionShareLink!
}

"""Represents NULL values"""
scalar Void

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input SignInInput {
  email: String!
  password: String!
}

input ResetPasswordInput {
  password: String!
  hash: String!
}

input CreateDocumentInput {
  title: String!
  content: String!
  collectionId: Float!
}

input UpdateDocumentInput {
  documentId: Float!
  title: String
  content: String
}

input DeleteDocumentInput {
  documentId: Float!
}

input CreateCollectionInput {
  name: String!
  description: String
}

input UpdateCollectionInput {
  collectionId: Float!
  name: String
  description: String
}

input DeleteCollectionInput {
  collectionId: Float!
}

input InviteUserToCollectionInput {
  collectionId: Float!
  email: String!
  role: UserCollectionRole!
}

input AcceptCollectionInviteInput {
  inviteToken: String!
}

input GenerateCollectionShareLinkInput {
  collectionId: Float!
  role: UserCollectionRole!
  expiresInDays: Float
}

input RemoveUserFromCollectionInput {
  collectionId: Float!
  userId: Float!
}

type Subscription {
  queryCollection(queryCollectionInput: QueryCollectionInput!): QueryResponse!
}

input QueryCollectionInput {
  collectionId: Float!
  query: String!
}